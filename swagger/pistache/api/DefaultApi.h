/**
* Example
* Example REST Endpoint.
*
* OpenAPI spec version: 2.3.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * DefaultApi.h
 *
 * 
 */

#ifndef DefaultApi_H_
#define DefaultApi_H_


#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <string>

namespace io {
namespace swagger {
namespace server {
namespace api {

//using namespace io::swagger::server::model;

class  DefaultApi {
public:
    DefaultApi(Pistache::Address addr);
    virtual ~DefaultApi() {};
    void init(size_t thr);
    void start();
    void shutdown();

    const std::string base = "/";

private:
    void setupRoutes();

    void parameter1_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void parameter1_parameter2_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void parameter1_parameter2_parameter3_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void parameter1_parameter2_parameter3_parameter4_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void default_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    std::shared_ptr<Pistache::Http::Endpoint> httpEndpoint;
    Pistache::Rest::Router router;


    /// <summary>
    /// Runs an external command.
    /// </summary>
    /// <remarks>
    /// Runs an external command.
    /// </remarks>
    /// <param name="parameter1">Parameter1.</param>
    virtual void parameter1_get(const std::string &parameter1, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Runs an external command.
    /// </summary>
    /// <remarks>
    /// Runs an external command.
    /// </remarks>
    /// <param name="parameter1">Parameter1.</param>
    /// <param name="parameter2">Parameter2.</param>
    virtual void parameter1_parameter2_get(const std::string &parameter1, const std::string &parameter2, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Runs an external command.
    /// </summary>
    /// <remarks>
    /// Runs an external command.
    /// </remarks>
    /// <param name="parameter1">Parameter1.</param>
    /// <param name="parameter2">Parameter2.</param>
    /// <param name="parameter3">Parameter3.</param>
    virtual void parameter1_parameter2_parameter3_get(const std::string &parameter1, const std::string &parameter2, const std::string &parameter3, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Runs an external command.
    /// </summary>
    /// <remarks>
    /// Runs an external command.
    /// </remarks>
    /// <param name="parameter1">Parameter1.</param>
    /// <param name="parameter2">Parameter2.</param>
    /// <param name="parameter3">Parameter3.</param>
    /// <param name="parameter4">Parameter4.</param>
    virtual void parameter1_parameter2_parameter3_parameter4_get(const std::string &parameter1, const std::string &parameter2, const std::string &parameter3, const std::string &parameter4, Pistache::Http::ResponseWriter &response) = 0;

};

}
}
}
}

#endif /* DefaultApi_H_ */

