/**
* Example
* Example REST Endpoint.
*
* OpenAPI spec version: 2.3.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/

#include "DefaultApi.h"

namespace io {
namespace swagger {
namespace server {
namespace api {

//using namespace io::swagger::server::model;

DefaultApi::DefaultApi(Pistache::Address addr)
    : httpEndpoint(std::make_shared<Pistache::Http::Endpoint>(addr))
{ };

void DefaultApi::init(size_t thr = 2) {
    auto opts = Pistache::Http::Endpoint::options()
        .threads(thr)
        .flags(Pistache::Tcp::Options::InstallSignalHandler);
    httpEndpoint->init(opts);
    setupRoutes();
}

void DefaultApi::start() {
    httpEndpoint->setHandler(router.handler());
    httpEndpoint->serve();
}

void DefaultApi::shutdown() {
    httpEndpoint->shutdown();
}

void DefaultApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Get(router, base + "/:parameter1", Routes::bind(&DefaultApi::parameter1_get_handler, this));
    Routes::Get(router, base + "/:parameter1/:parameter2", Routes::bind(&DefaultApi::parameter1_parameter2_get_handler, this));
    Routes::Get(router, base + "/:parameter1/:parameter2/:parameter3", Routes::bind(&DefaultApi::parameter1_parameter2_parameter3_get_handler, this));
    Routes::Get(router, base + "/:parameter1/:parameter2/:parameter3/:parameter4", Routes::bind(&DefaultApi::parameter1_parameter2_parameter3_parameter4_get_handler, this));

    // Default handler, called when a route is not found
    router.addCustomHandler(Routes::bind(&DefaultApi::default_api_default_handler, this));
}

void DefaultApi::parameter1_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto parameter1 = request.param(":parameter1").as<std::string>();
    
    try {
      this->parameter1_get(parameter1, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void DefaultApi::parameter1_parameter2_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto parameter1 = request.param(":parameter1").as<std::string>();
    auto parameter2 = request.param(":parameter2").as<std::string>();
    
    try {
      this->parameter1_parameter2_get(parameter1, parameter2, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void DefaultApi::parameter1_parameter2_parameter3_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto parameter1 = request.param(":parameter1").as<std::string>();
    auto parameter2 = request.param(":parameter2").as<std::string>();
    auto parameter3 = request.param(":parameter3").as<std::string>();
    
    try {
      this->parameter1_parameter2_parameter3_get(parameter1, parameter2, parameter3, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void DefaultApi::parameter1_parameter2_parameter3_parameter4_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto parameter1 = request.param(":parameter1").as<std::string>();
    auto parameter2 = request.param(":parameter2").as<std::string>();
    auto parameter3 = request.param(":parameter3").as<std::string>();
    auto parameter4 = request.param(":parameter4").as<std::string>();
    
    try {
      this->parameter1_parameter2_parameter3_parameter4_get(parameter1, parameter2, parameter3, parameter4, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}

void DefaultApi::default_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}
}
}
}

